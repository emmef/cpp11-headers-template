#! /bin/bash

projectName="__projectName__"
description="__description__"
headerSubDir="__headerSubDir__"
copyRightHolder="__copyRightHolder__"
copyRightYear="__copyRightYear__"
emailAddress="__emailAddress__"
contantsPrefix="__constantsPrefix__"
nameSpace="__nameSpace__"
sourceRepository="__sourceRepository__"
sourceTemplatesDirectory="sourcetemplates"
headerExtension="__headerExtension__"
sourceExtension="__sourceExtension__"
REGEXP_BASE_NAME='[[:alpha:]]([[:alnum:]]|_)+'
REGEXP_BASE_NAME_WHOLE="^$REGEXP_BASE_NAME\$"

printSynopsis() {
	if test -n "$1"
	then
		echo "ERROR:\n\t$1"
	fi
	echo "SYNOPSIS"
	echo "  `basename $0` fileBaseName [-nt|--no-test-suite]"
	echo "The command will generate a header file"
	echo "  fileBaseName.${headerExtension}"
	echo "Unless prevented by passing -nt or --no-test-suite,"
	echo "a test suite will be generated and included in the build"
	echo "(but not the install)."
}

# Determine if the value in $1 matches the regular expression in $2.
# Echoes the valid value and returns nonzero otherwise
# If provided, $3 is used in the description for the error message.
validRegExp()
{
	if [[ "x" == "x$1" ]]
	then
		echo "validRegExp(): Missing value" >&2
	elif [[ "x" == "x$2" ]]
	then
		echo "validRegExp(): Missing expression" >&2
	elif [[ $1 =~ $2 ]]
	then
		return 0
	fi

	if [[ "x" == "x$3" ]]
	then
		echo "validRegExp(): Value '$1' does not match the expression '$2'" >&2
	else
		echo "validRegExp(): Value for $3, '$1', does not match the expression '$2'" >&2
	fi

	return 1
}

if [[ "x$1" =~ x(-h|--help) ]]
then
	printSynopsis
	exit 0
fi

if ! validRegExp "$1" "$REGEXP_BASE_NAME_WHOLE" "file base-name"
then
	printSynopsis "Invalid file base-name: $1" >&2
	exit 1
fi

fileBaseName="$1"
generateSources="YES"

if [[ "x$2" =~ x(-nt|--no-test-suite) ]]
then
	generateSources=
fi

echo "Creating source files based on '$fileBaseName'"

headerGuard=`echo "${contantsPrefix}_${fileBaseName}_HEADER_GUARD" | sed -r s/"\\-"/"_"/g | tr '[:lower:]' '[:upper:]'`

currentYear=`date +"%Y"`

if ! test "${currentYear}" = "${copyRightYear}"
then
	copyRightYear="${copyRightYear}-${currentYear}"
fi

copyRightNotice="Copyright (C) ${copyRightYear} ${copyRightHolder}."

echo "Generating files from templates with"
echo " Copyright = ${copyRightNotice}"
echo " Contact   = ${emailAddress}"
echo " Guard     = ${headerGuard}"

replaceExpression()
{
	r1='s/\\/\\\\/g'
	r2='s/\//\\\//g'
	variableToSubstitute="$1"
	substituteValue=`echo "$2" | sed -r "$r1" | sed -r "$r2" `

	expr="s/${variableToSubstitute}/$substituteValue/g"

	echo "$expr"
}


headerDirectory="./include/$headerSubDir"
sourceDirectory="./test"
headerFileName="$fileBaseName.$headerExtension"
includeName="$headerSubDir/$headerFileName"
className="$fileBaseName"
if [[ "$fileBaseName" =~ ^[[:upper:]] ]]
then
	testClassName="Test$fileBaseName"
else
	testClassName="test_$fileBaseName"
fi
testHeaderFileName="$testClassName.$headerExtension"
sourceFileName="$testClassName.$sourceExtension"

projectNameExpr=`replaceExpression "__templateProjectName__" "$projectName"`
descriptionExpr=`replaceExpression "__templateProjectDescription__" "$description"`
headerSubDirExpr=`replaceExpression "__templateProjectHeaderSubDir__" "$headerSubDir"`
copyRightHolderExpr=`replaceExpression "__templateCopyProjectRightHolder__" "$copyRightHolder"`
copyRightYearExpr=`replaceExpression "__templateProjectCopyRightYear__" "$copyRightYear"`
emailAddressExpr=`replaceExpression "__templateProjectEmailAddress__" "$emailAddress"`
contantsPrefixExpr=`replaceExpression "__templateProjectConstantsPrefix__" "$constantsPrefix"`
nameSpaceExpr=`replaceExpression "__templateProjectNameSpace__" "$nameSpace"`
sourceRepositoryExpr=`replaceExpression "__templateProjectSourceRepository__" "$sourceRepository"`
copyRightNoticeExpr=`replaceExpression "__templateCopyRightNotice__" "$copyRightNotice"`
headerGuardNameExpr=`replaceExpression "__templateHeaderGuard__" "$headerGuard"`
headerExtensionExpr=`replaceExpression "hpp" "$headerExtension"`
sourceExtensionExpr=`replaceExpression "cpp" "$sourceExtension"`
classNameNameExpr=`replaceExpression "__templateClass__" "$className"`
testClassNameExpr=`replaceExpression "__templateTestClass__" "$testClassName"`
sourceFileNameExpr=`replaceExpression "__templateSourceFile__" "$sourceFileName"`
headerFileNameExpr=`replaceExpression "__templateIncludeFile__" "$includeName"`
testHeaderFileNameExpr=`replaceExpression "__templateTestIncludeFile__" "$testHeaderFileName"`

autoAddComment='[[:space:]]*#[[:space:]]*__AUTO_ADD_SOURCES_HERE__.*'
newLineAndComment='\n\0'
autoAddSourceExpr="s/^$autoAddComment\$/testsuite_SOURCES += $sourceFileName$newLineAndComment/"

autoAddComment='([[:space:]]*\/\/[[:space:]]*__AUTO_ADD_TEST_INCLUDES_HERE__.*)'
newLineAndComment='\n\1'
autoAddIncludeExpr="s/^$autoAddComment\$/#include \"$testHeaderFileName\"$newLineAndComment/"

autoAddComment='([[:space:]]*)(\/\/[[:space:]]*__AUTO_ADD_SUITE_HERE__.*)'
indentAndPrefix='\1runner.addTest';
newLineAndComment='\n\2'
autoAddTestSuiteExpr="s/^$autoAddComment\$/$indentAndPrefix($testClassName::createSuite());$newLineAndComment/"

echo "autoAddSourceExpr    = $autoAddSourceExpr"
echo "autoAddIncludeExpr   = $autoAddIncludeExpr"
echo "autoAddTestSuiteExpr = $autoAddTestSuiteExpr"


echo "autoAddSourceExpr    = $autoAddSourceExpr"
echo "autoAddIncludeExpr   = $autoAddIncludeExpr"
echo "autoAddTestSuiteExpr = $autoAddTestSuiteExpr"

substituteTemplateVariables()
{
	cat - |\
		sed -r "$projectNameExpr" |\
		sed -r "$descriptionExpr" |\
		sed -r "$headerSubDirExpr" |\
		sed -r "$copyRightHolderExpr" |\
		sed -r "$copyRightYearExpr" |\
		sed -r "$emailAddressExpr" |\
		sed -r "$contantsPrefixExpr" |\
		sed -r "$nameSpaceExpr" |\
		sed -r "$sourceRepositoryExpr" |\
		sed -r "$copyRightNoticeExpr" |\
		sed -r "$headerGuardNameExpr" |\
		sed -r "$headerExtensionExpr" |\
		sed -r "$sourceExtensionExpr" |\
		sed -r "$classNameNameExpr" |\
		sed -r "$testClassNameExpr" |\
		sed -r "$sourceFileNameExpr" |\
		sed -r "$headerFileNameExpr" |\
		sed -r "$testHeaderFileNameExpr"
}

generateFromTemplate()
{
	templateFileName="$2"
	targetFileName="$3"

	echo "Generating $1 '$targetFileName' from template '$templateFileName'"

	if ! [[ -f "$templateFileName" ]]
	then
		echo "Template file does not exist: $templateFileName" >&2
		exit 1
	fi
	if ! mkdir -p `dirname "$targetFileName"`
	then
		echo "Directory for target file does not exist or could not be created: $targetFileName" >&2
		exit 1
	fi
	if [[ -f "$targetFileName" ]]
	then
		echo "Target file already exists: $targetFileName" >&2
		exit 1
	fi
	if ! cat "$templateFileName" | substituteTemplateVariables > "$targetFileName"
	then
		echo "Error while generating: '$templateFileName' -> '$targetFileName'" >&2
		exit 1
	fi
}

autoAddToFile()
{
	fileName="$2"
	expr1="$3"
	expr2="$4"
	backupFileName="$fileName~"
	tempFile="$backupFileName~"

	echo "Adding $1 to '$fileName'"

	if ! cp "$fileName" "$backupFileName"
	then
		echo "Could not create backup file $backupFileName"
		exit 1
	fi
	errorMessage="Substitution failed"
	if [[ "x" == "x$expr2" ]]
	then
		echo "Using: $expr1"
		if cat "$backupFileName" | sed -r "$expr1" > "$tempFile"
		then
			errorMessage="Copying back failed"
			if cp "$tempFile" "$fileName"
			then
				return 0
			fi
		fi
	else
		echo "Using: [1] $expr1"
		echo "       [2] $expr2"

		if cat "$backupFileName" | sed -r "$expr1" | sed -r "$expr2" > "$tempFile"
		then
			errorMessage="Copying back failed"
			if cp "$tempFile" "$fileName"
			then
				return 0
			fi
		fi
	fi
	echo "Error: $errorMessage" >&2
	exit 1
}


generateFromTemplate "header" "$sourceTemplatesDirectory/header.hpp" "$headerDirectory/$headerFileName"

if [[ "x" != "x$generateSources" ]]
then
	generateFromTemplate "test suite header" "$sourceTemplatesDirectory/testheader.hpp" "$sourceDirectory/$testHeaderFileName"
	generateFromTemplate "test suite source" "$sourceTemplatesDirectory/testsource.cpp" "$sourceDirectory/$sourceFileName"

	autoAddToFile "source file" "$sourceDirectory/Makefile.am" "$autoAddSourceExpr"
	autoAddToFile "test include and test suite" "$sourceDirectory/Main.cpp" "$autoAddIncludeExpr" "$autoAddTestSuiteExpr"
fi