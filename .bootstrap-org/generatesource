#! /bin/bash

projectName="__projectName__"
description="__description__"
headerSubDir="__headerSubDir__"
copyRightHolder="__copyRightHolder__"
copyRightYear="__copyRightYear__"
emailAddress="__emailAddress__"
contantsPrefix="__constantsPrefix__"
nameSpace="__nameSpace__"
sourceRepository="__sourceRepository__"
sourceTemplatesDirectory="sourcetemplates"
headerExtension="__headerExtension__"
sourceExtension="__sourceExtension__"
REGEXP_BASE_NAME='[[:alpha:]][[:alnum:]]+'
REGEXP_BASE_NAME_WHOLE="^$REGEXP_BASE_NAME\$"

printSynopsis() {
	if test -n "$1"
	then
		echo "ERROR:\n\t$1"
	fi
	echo "SYNOPSIS"
	echo "  `basename $0` fileBaseName [-ns|--no-source]"
	echo "  The command will generate a header file"
	echo "     fileBaseName.${headerExtension}"
	echo "  and, if -ns or --no-source is NOT given, also a source file"
	echo "     src/fileBaseName.${sourceExtension}"
	echo "  It will add the source file to src/Makefile.am, so that "
	echo "  it is at least verified whether the header compiles at all."
	echo "  Naturally, actually add some sanity checking in the source"
	echo "  file is recommended."
}

# Determine if the value in $1 matches the regular expression in $2.
# Echoes the valid value and returns nonzero otherwise
# If provided, $3 is used in the description for the error message.
validRegExp()
{
	if [[ "x" == "x$1" ]]
	then
		echo "validRegExp(): Missing value" >&2
	elif [[ "x" == "x$2" ]]
	then
		echo "validRegExp(): Missing expression" >&2
	elif [[ $1 =~ $2 ]]
	then
		return 0
	fi

	if [[ "x" == "x$3" ]]
	then
		echo "validRegExp(): Value '$1' does not match the expression '$2'" >&2
	else
		echo "validRegExp(): Value for $3, '$1', does not match the expression '$2'" >&2
	fi

	return 1
}

if [[ "x$1" =~ x(-h|--help) ]]
then
	printSynopsis
	exit 0
fi

if ! validRegExp "$1" "$REGEXP_BASE_NAME_WHOLE" "file base-name"
then
	printSynopsis "Invalid file base-name: $1" >&2
	exit 1
fi

fileBaseName="$1"

if [[ "x$2" =~ x(-ns|--no-source) ]]
then
	fileExtensions="$headerExtension"
elif [[ "x$2" == "x" ]]
then
	fileExtensions="$headerExtension $sourceExtension"
else
	printSynopsis "Invalid argument: $2" >&2
	exit 1
fi

echo "Creating source files based on '$fileBaseName' using extensions $fileExtensions"

headerGuard=`echo "${contantsPrefix}_${fileBaseName}_HEADER_GUARD" | sed -r s/"\\-"/"_"/g | tr '[:lower:]' '[:upper:]'`

currentYear=`date +"%Y"`

if ! test "${currentYear}" = "${copyRightYear}"
then
	copyRightYear="${copyRightYear}-${currentYear}"
fi

copyRightNotice="Copyright (C) ${copyRightYear} ${copyRightHolder}."

echo "Generating files from templates with"
echo " Copyright = ${copyRightNotice}"
echo " Contact   = ${emailAddress}"
echo " Guard     = ${headerGuard}"

replaceExpression()
{
	r1='s/\\/\\\\/g'
	r2='s/\//\\\//g'
	variableToSubstitute="$1"
	substituteValue=`echo "$2" | sed -r "$r1" | sed -r "$r2" `

	if [[ "x$3" != "xNoUnderscores" ]]
	then
		expr="s/__${variableToSubstitute}__/$substituteValue/g"
	else
		expr="s/${variableToSubstitute}/$substituteValue/g"
	fi

	echo "$expr"
}

projectNameExpr=`replaceExpression "templateProjectName" "$projectName"`
descriptionExpr=`replaceExpression "templateProjectDescription" "$description"`
headerSubDirExpr=`replaceExpression "templateProjectHeaderSubDir" "$headerSubDir"`
copyRightHolderExpr=`replaceExpression "templateCopyProjectRightHolder" "$copyRightHolder"`
copyRightYearExpr=`replaceExpression "templateProjectCopyRightYear" "$copyRightYear"`
emailAddressExpr=`replaceExpression "templateProjectEmailAddress" "$emailAddress"`
contantsPrefixExpr=`replaceExpression "templateProjectConstantsPrefix" "$constantsPrefix"`
nameSpaceExpr=`replaceExpression "templateProjectNameSpace" "$nameSpace"`
sourceRepositoryExpr=`replaceExpression "templateProjectSourceRepository" "$sourceRepository"`
copyRightNoticeExpr=`replaceExpression "templateCopyRightNotice" "$copyRightNotice"`
headerGuardNameExpr=`replaceExpression "templateHeaderGuard" "$headerGuard"`
headerExtensionExpr=`replaceExpression "headerExtension" "$headerExtension"`
sourceExtensionExpr=`replaceExpression "sourceExtension" "$sourceExtension"`


headerDirectory="./include/$headerSubDir"
sourceDirectory="./src"
headerFileName="$fileBaseName.$headerExtension"
sourceFileName="$fileBaseName.$sourceExtension"
includeName="$headerSubDir/$headerFileName"

sourceMakeFile="./src/Makefile.am"
autAddComment="__AUTO_ADD_SOURCES_HERE__"

getLastSourceFile()
{
	cat "$sourceMakeFile" |\
		grep -B1 "#[[:space:]]*${autoAddComment}"	|\
		grep -E "^[[:space:]]+$REGEXP_BASE_NAME\\.$sourceExtension[[:space:]]*\$" |\
		sed -r 's/^[[:space:]]*(([[:alnum:]]|\.)+).*$/\1/'
}

for fileExtension in $fileExtensions
do
	if [[ "$fileExtension" == "$headerExtension" ]]
	then
		targetDirectory="$headerDirectory"
		targetFileName="$headerFileName"
		sourceFile="$sourceTemplatesDirectory/header.hpp"
		lastSourceFile=
		autoAddSourceExpression=
	else
		targetDirectory="$sourceDirectory"
		targetFileName="$sourceFileName"
		sourceFile="$sourceTemplatesDirectory/source.cpp"
		lastSourceFile=`getLastSourceFile`
		if [[ "x" != "x$lastSourceFile" ]]
		then
			spaces="([[:space:]]+)";
			lastSourceFilePastern="(`echo "$lastSourceFile" | sed -r 's/\./\\\./g'`)"
			replacer1='\1\2 \\\n\1'
			autoAddSourceExpression="s/^${spaces}${lastSourceFilePastern}.*\$/$replacer1$sourceFileName/"
			echo "Auto-add: $autoAddSourceExpression"
		else
			echo "Skipping auto-add of source file to '$sourceMakeFile'"
			get
		fi
	fi
	targetFilePath="$targetDirectory/$targetFileName"

	if test -f "$targetFilePath"
	then
		echo "Skipped generation of already existing file: $targetFilePath"
		continue
	fi

	if ! mkdir -p "$targetDirectory"
	then
		echo "Could not create target directory '$targetDirectory'" >&2
		exit 1
	fi

	sourceFileNameExpr=`replaceExpression "templateFileName" "$targetFileName"`
	headerFileNameExpr=`replaceExpression "templateInclude" "$includeName"`

	if cat "${sourceFile}" |\
		sed -r "$projectNameExpr" |\
		sed -r "$descriptionExpr" |\
		sed -r "$headerSubDirExpr" |\
		sed -r "$copyRightHolderExpr" |\
		sed -r "$copyRightYearExpr" |\
		sed -r "$emailAddressExpr" |\
		sed -r "$contantsPrefixExpr" |\
		sed -r "$nameSpaceExpr" |\
		sed -r "$sourceRepositoryExpr" |\
		sed -r "$copyRightNoticeExpr" |\
		sed -r "$headerGuardNameExpr" |\
		sed -r "$sourceExtensionExpr" |\
		sed -r "$headerExtensionExpr" |\
		sed -r "$sourceFileNameExpr" |\
		sed -r "$headerFileNameExpr" \
		> "$targetFilePath"
	then
		echo "Generated: ${sourceFile} -> ${targetFilePath}"
		if [[ "x" != "x$autoAddSourceExpression" ]]
		then
			cp "${sourceMakeFile}" "${sourceMakeFile}~"
			cat "${sourceMakeFile}~" | sed -r "$autoAddSourceExpression" >"${sourceMakeFile}"
		fi
	else
		echo "Failed to generate: ${sourceFile} -> ${targetFilePath}" >&2
		exit 1
	fi
done
